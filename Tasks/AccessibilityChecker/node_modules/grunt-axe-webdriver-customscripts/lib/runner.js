'use strict';

require('chromedriver');

var junitReporter = require('./junitReporter');
var webdriver = require('selenium-webdriver');
var phantomjs = require('phantomjs').path;
const path = require('path');
var fs = require('fs');

module.exports = function (grunt, WebDriver, Promise, AxeBuilder, reporter) {
	var _this = this;

	var options = _this.options({
		browser: 'firefox',
		server: null,
		threshold: 0,
		tags: null
	});

	var self = _this;

	var tagsAreDefined =
		(!Array.isArray(options.tags) && options.tags !== null && options.tags !== '') ||
		(Array.isArray(options.tags) && options.tags.length > 0);
	var done = _this.async();

	var customPhantom = webdriver.Capabilities.phantomjs();
	customPhantom.set("phantomjs.binary.path", phantomjs);

	var driver = new WebDriver.Builder()
    	.withCapabilities(customPhantom)
		.forBrowser(options.browser)
		.usingServer(options.server)
		.build();

	var dest = _this.data.dest;
	var junitDest = _this.data.junitDest;

	if (typeof _this.data.urls === 'function') {
		_this.data.urls = _this.data.urls();
	}

	if (_this.data.loginurl) {
		console.log('Executing login script');
		console.log("URL: " + _this.data.loginurl);
		console.log(_this.data.userControlName + ':' + _this.data.user);
		console.log(_this.data.passControlName + ':' + _this.data.pass);
		console.log(_this.data.loginButtonName);

		driver.get(_this.data.loginurl)
		.then(function() {
			driver.findElement(webdriver.By.xpath(_this.data.userControlName)).sendKeys(_this.data.user);
			driver.findElement(webdriver.By.xpath(_this.data.passControlName)).sendKeys(_this.data.pass);
			driver.findElement(webdriver.By.xpath(_this.data.loginButtonName)).click();
			
			console.log('Waiting for ' + _this.data.titleToWait);

			driver.wait(() => webdriver.until.titleContains(_this.data.titleToWait), 5000, "The page title does not contains '" + _this.data.titleToWait + "'.");
		});
	}

	driver.wait(function() {
		console.log("Initiating web accessibility test...");
		return true;
	}, 1000);

	Promise.all(_this.data.urls.map(function (data) {
		return new Promise(function (resolve, reject) {
			var url = data.url;
			var preScriptFile = data.preScriptFile;
			var elementToWait = data.elementToWait;
			var timeout = data.timeout ? data.timeout : 5000;
			var startDate;

			driver.wait(function() {
				console.log("Executing test for: " + url);
				startDate = new Date();
				return true;
			}, 1000);

			driver
				.get(url)
				.then(function () {
					if (preScriptFile) {
						console.log("Injecting prescript");

						var absoluteFilePath = path.resolve(preScriptFile);
						var scriptString = fs.readFileSync(absoluteFilePath, "utf-8");

						driver.executeScript(scriptString);
					}

					if (elementToWait)
					{
						driver.wait(() => 
							driver.isElementPresent(webdriver.By.xpath(elementToWait)
						), timeout, "Element '" + elementToWait + "' not found.");
					}

					driver.wait(function() {
						console.log("Analysing results");
										
						var axeBuilder = new AxeBuilder(driver);
				
						if (tagsAreDefined) {
							axeBuilder.withTags(options.tags);
						}
				
						axeBuilder.analyze(function (results) {
							var endDate = new Date();
							results.url = url;
							results.timestamp = endDate.getTime();
							results.time = (endDate.getTime() - startDate.getTime()) / 1000;
							resolve(results);
						});
						return true;
					}, 1000);
				});
		});
	})).then(function (results) {
		if (dest) {
			grunt.file.write(dest, JSON.stringify(results, null, '  '));
		}
		
		if (junitDest) {
			junitReporter(results, junitDest);
		}

		var result = reporter(grunt, results, options.threshold);

		driver.quit().then(function () {
			done(result);
		});
	});
};
